name: 'GoTest Action Report'
description: 'Generate beautiful Markdown reports from Go test output'
author: 'dipjyotimetia'
branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  test-json-file:
    description: 'Path to the go test -json output file'
    required: false
    default: 'test-output.json'
  output-file:
    description: 'Path for the generated Markdown report'
    required: false
    default: 'test-report.md'
  comment-pr:
    description: 'Whether to comment the PR with the test report'
    required: false
    default: 'true'
  job-name:
    description: 'Name of the job running the tests (for multi-job reports)'
    required: false
    default: ''
  summary-only:
    description: 'Include only summary in the combined PR comment (for multi-job setups)'
    required: false
    default: 'false'
  write-summary:
    description: 'Whether to write the test report to GitHub Actions Summary'
    required: false
    default: 'false'
  create-issue-on-failure:
    description: 'Whether to create a GitHub issue when tests fail'
    required: false
    default: 'false'
  issue-title:
    description: 'Title for the GitHub issue to be created on test failure'
    required: false
    default: 'Test Failure Report'
  issue-labels:
    description: 'Comma-separated list of labels for the created issue'
    required: false
    default: 'test-failure,bug'
  issue-assignees:
    description: 'Comma-separated list of users to assign to the created issue'
    required: false
    default: ''  

runs:
  using: 'composite'
  steps:
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
        cache: false

    - name: Generate test report
      shell: bash
      run: |
        go run ${{ github.action_path }}/main.go -input "${{ inputs.test-json-file }}" -output "${{ inputs.output-file }}"
        
    - name: Upload Test Report
      uses: actions/upload-artifact@v4
      with:
        name: test-report${{ inputs.job-name != '' && format('_{0}', inputs.job-name) || '' }}
        path: ${{ inputs.output-file }}

    - name: Write to GitHub Actions Summary
      if: ${{ inputs.write-summary == 'true' }}
      shell: bash
      run: |
        # Write the test report to GitHub Actions Summary
        cat "${{ inputs.output-file }}" >> $GITHUB_STEP_SUMMARY

    - name: Add workflow run link to report
      if: ${{ inputs.comment-pr == 'true' && github.event_name == 'pull_request' }}
      shell: bash
      run: |
        # Create a temporary file
        TEMP_FILE=$(mktemp)
        
        # Extract all content before the timestamp line
        sed '/Report generated at/,$d' "${{ inputs.output-file }}" > "$TEMP_FILE"
        
        # Add workflow run link and timestamp
        echo "" >> "$TEMP_FILE"
        echo "---" >> "$TEMP_FILE"
        
        if [ -n "${{ inputs.job-name }}" ]; then
          echo "Job: **${{ inputs.job-name }}** | " >> "$TEMP_FILE"
        fi
        
        echo "[View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> "$TEMP_FILE"
        echo "" >> "$TEMP_FILE"
        echo "Report generated at: $(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> "$TEMP_FILE"
        
        # Replace original file with modified version
        mv "$TEMP_FILE" "${{ inputs.output-file }}"
      
    - name: Prepare report for job
      if: ${{ inputs.comment-pr == 'true' && github.event_name == 'pull_request' }}
      id: prepare-report
      shell: bash
      run: |
        # Process report based on settings
        if [ "${{ inputs.summary-only }}" == "true" ]; then
          # Extract only summary section
          REPORT_CONTENT=$(awk '/^## Summary$/,/^##/ {if (!/^## [^S]/) print}' "${{ inputs.output-file }}")
          
          if [ -n "${{ inputs.job-name }}" ]; then
            # Add job name header
            REPORT_CONTENT="### ${{ inputs.job-name }} Test Results\n\n${REPORT_CONTENT}"
          fi
        else
          # Use full report
          REPORT_CONTENT=$(cat "${{ inputs.output-file }}")
          
          if [ -n "${{ inputs.job-name }}" ]; then
            # Add job name header at the beginning
            TEMP_FILE=$(mktemp)
            echo "# ${{ inputs.job-name }} Test Results" > "$TEMP_FILE"
            echo "" >> "$TEMP_FILE"
            # Remove existing title and append the rest
            tail -n +2 "${{ inputs.output-file }}" >> "$TEMP_FILE"
            REPORT_CONTENT=$(cat "$TEMP_FILE")
          fi
        fi
        
        # Save for next step
        echo "REPORT<<EOF" >> $GITHUB_ENV
        echo "$REPORT_CONTENT" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

    - name: Find Comment
      if: ${{ inputs.comment-pr == 'true' && github.event_name == 'pull_request' }}
      uses: peter-evans/find-comment@v3
      id: find-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: "Test Summary Report"

    - name: Check if previous tests failed
      if: ${{ inputs.comment-pr == 'true' && github.event_name == 'pull_request' && steps.find-comment.outputs.comment-id != '' }}
      id: check-previous-status
      shell: bash
      run: |
        if echo "${{ steps.find-comment.outputs.comment-body }}" | grep -q "Status-FAILED"; then
          echo "HAD_FAILED_TESTS=true" >> $GITHUB_ENV
        else
          echo "HAD_FAILED_TESTS=false" >> $GITHUB_ENV
        fi
        
        # Check if current tests pass
        if grep -q "Status-PASSED" "${{ inputs.output-file }}"; then
          echo "NOW_PASSING=true" >> $GITHUB_ENV
        else
          echo "NOW_PASSING=false" >> $GITHUB_ENV
        fi

    - name: Create or update job comment for multi-job setup
      if: ${{ inputs.comment-pr == 'true' && github.event_name == 'pull_request' && inputs.job-name != '' }}
      uses: peter-evans/find-comment@v3
      id: find-job-comment
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-author: 'github-actions[bot]'
        body-includes: "${{ inputs.job-name }} Test Results"

    - name: Save or update individual job report
      if: ${{ inputs.comment-pr == 'true' && github.event_name == 'pull_request' && inputs.job-name != '' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-id: ${{ steps.find-job-comment.outputs.comment-id }}
        body: |
          # ${{ inputs.job-name }} Test Results
          ${{ env.HAD_FAILED_TESTS == 'true' && env.NOW_PASSING == 'true' && 'ðŸŽ‰ **Previously failed tests are now passing!** ðŸŽ‰' || '' }}

          ${{ env.REPORT }}
        edit-mode: replace

    - name: Update main summary comment
      if: ${{ inputs.comment-pr == 'true' && github.event_name == 'pull_request' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.pull_request.number }}
        comment-id: ${{ steps.find-comment.outputs.comment-id }}
        body: |
          ${{ env.HAD_FAILED_TESTS == 'true' && env.NOW_PASSING == 'true' && 'ðŸŽ‰ **Previously failed tests are now passing!** ðŸŽ‰' || '' }}

          ${{ env.REPORT }}
          
          <details>
          <summary>View details for all test jobs</summary>
          
          This is a combined report summary. See individual job comments for detailed reports or check the [workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          </details>
        edit-mode: replace

   # Fix the issue creation step to make it independent of the fail-on-test-failure option
    - name: Create issue for test failures
      if: ${{ inputs.create-issue-on-failure == 'true' }}
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          const fs = require('fs');
          
          // Read the test report
          const reportContent = fs.readFileSync('${{ inputs.output-file }}', 'utf8');
          
          // Only create issue if tests failed
          if (reportContent.includes('Status-FAILED-red')) {
            const runUrl = `https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            const issueTitle = `${{ inputs.issue-title }} - ${new Date().toISOString().split('T')[0]}`;
            
            // Create the issue body with test results
            let issueBody = `## Test Failure Report\n\n`;
            issueBody += `Test failures detected in workflow run: [View Workflow Run](${runUrl})\n\n`;
            issueBody += `### Test Report\n\n`;
            
            // Extract and include only the relevant sections (summary + failed tests)
            const summarySection = reportContent.match(/## Summary[\s\S]*?(?=##)/m);
            const failedTestsSection = reportContent.match(/## Failed Tests Details[\s\S]*?(?=##)/m);
            
            if (summarySection) {
              issueBody += summarySection[0] + "\n";
            }
            
            if (failedTestsSection) {
              issueBody += failedTestsSection[0] + "\n";
            } else {
              issueBody += "No detailed failure information available.\n";
            }
            
            // Add reference to pull request if available
            if ('${{ github.event_name }}' === 'pull_request') {
              const prNumber = '${{ github.event.pull_request.number }}';
              const prLink = `https://github.com/${{ github.repository }}/pull/${prNumber}`;
              issueBody += `\n### Related Pull Request\n\n`;
              issueBody += `This failure occurred in [PR #${prNumber}](${prLink})`;
            }
            
            issueBody += `\n\n_This issue was automatically created by the test workflow._`;
            
            // Parse labels and assignees
            const labels = '${{ inputs.issue-labels }}'.split(',').filter(l => l.trim() !== '');
            const assignees = '${{ inputs.issue-assignees }}'.split(',').filter(a => a.trim() !== '');
            
            // Create the issue
            const { data } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: issueTitle,
              body: issueBody,
              labels: labels,
              assignees: assignees
            });
            
            console.log(`Created issue #${data.number}: ${data.html_url}`);
            
            // Add the issue link to the GitHub summary
            await core.summary.addRaw(`## :warning: Test Failures Detected\n\nAn issue has been created: [#${data.number}: ${issueTitle}](${data.html_url})`).write();
          } else {
            console.log("No test failures detected, skipping issue creation");
          }    